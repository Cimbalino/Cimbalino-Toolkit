// ****************************************************************************
// <copyright file="EventHandlerExtensions.cs" company="Pedro Lamas">
// Copyright © Pedro Lamas 2014
// </copyright>
// ****************************************************************************
// <author>Pedro Lamas</author>
// <email>pedrolamas@gmail.com</email>
// <project>Cimbalino.Toolkit.Core</project>
// <web>http://www.pedrolamas.com</web>
// <license>
// See license.txt in this solution or http://www.pedrolamas.com/license_MIT.txt
// </license>
// ****************************************************************************

using System;

namespace Cimbalino.Toolkit.Extensions
{
    /// <summary>
    /// Provides a set of static (Shared in Visual Basic) methods for <see cref="EventHandler{T}"/> instances.
    /// </summary>
    public static class EventHandlerExtensions
    {
        /// <summary>
        /// Raises the event.
        /// </summary>
        /// <param name="eventHandler">The event to raise.</param>
        /// <param name="sender">The source of the event.</param>
        /// <param name="eventArgs">The arguments for the event.</param>
        public static void SafeInvoke(this EventHandler eventHandler, object sender, EventArgs eventArgs)
        {
            if (eventHandler != null)
            {
                eventHandler(sender, eventArgs);
            }
        }

        /// <summary>
        /// Raises the event.
        /// </summary>
        /// <param name="eventHandler">The event to raise.</param>
        /// <param name="sender">The source of the event.</param>
        /// <param name="eventArgs">The arguments for the event.</param>
        /// <typeparam name="T">The type of the event data generated by the event.</typeparam>
        public static void SafeInvoke<T>(this EventHandler<T> eventHandler, object sender, T eventArgs) where T : EventArgs
        {
            if (eventHandler != null)
            {
                eventHandler(sender, eventArgs);
            }
        }

        /// <summary>
        /// Raises the event with cancellation possibility.
        /// </summary>
        /// <param name="eventHandler">The event to raise.</param>
        /// <param name="sender">The source of the event.</param>
        /// <param name="eventArgs">The arguments for the event.</param>
        /// <param name="cancelInvocation">A predicate that returns true to cancel the invocation.</param>
        /// <returns>true if the event has not been cancelled by any of the subscribers; otherwise, false.</returns>
        public static bool SafeInvoke(this EventHandler eventHandler, object sender, EventArgs eventArgs, Func<EventArgs, bool> cancelInvocation)
        {
            if (eventHandler != null)
            {
                foreach (EventHandler subscriber in eventHandler.GetInvocationList())
                {
                    subscriber(sender, eventArgs);

                    if (cancelInvocation(eventArgs))
                    {
                        return false;
                    }
                }
            }

            return true;
        }

        /// <summary>
        /// Raises the event with cancellation possibility.
        /// </summary>
        /// <param name="eventHandler">The event to raise.</param>
        /// <param name="sender">The source of the event.</param>
        /// <param name="eventArgs">The arguments for the event.</param>
        /// <param name="cancelInvocation">A predicate that returns true to cancel the invocation.</param>
        /// <typeparam name="T">The type of the event data generated by the event.</typeparam>
        /// <returns>true if the event has not been cancelled by any of the subscribers; otherwise, false.</returns>
        public static bool SafeInvoke<T>(this EventHandler<T> eventHandler, object sender, T eventArgs, Func<T, bool> cancelInvocation) where T : EventArgs
        {
            if (eventHandler != null)
            {
                foreach (EventHandler<T> subscriber in eventHandler.GetInvocationList())
                {
                    subscriber(sender, eventArgs);

                    if (cancelInvocation(eventArgs))
                    {
                        return false;
                    }
                }
            }

            return true;
        }
    }
}